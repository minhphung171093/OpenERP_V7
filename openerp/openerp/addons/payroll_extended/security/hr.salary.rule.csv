id,hr_salary_rule_glcode_ids/id,active,amount_select,appears_on_payslip,category_id/id,child_ids/id,code,company_id/id,condition_select,register_id/id,note,amount_fix,input_ids/id,condition_range_max,condition_range_min,name,parent_rule_id/id,amount_percentage,amount_percentage_base,amount_python_compute,condition_python,quantity,condition_range,sequence
hr_payroll.hr_rule_basic,,True,Python Code,True,hr_payroll.BASIC,,BASIC,base.main_company,Always True,__export__.hr_contribution_register_12,,,,,,Basic,,,,result = contract.wage, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,1
hr_payroll.hr_rule_taxable,,True,Python Code,True,hr_payroll.GROSS,,GROSS,base.main_company,Always True,,,,,,,Gross,,,,result = categories.BASIC + categories.ADD - categories.DED_INCL_CPF, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,300
__export__.hr_salary_rule_42,,True,Python Code,True,hr_payroll.NET,,NET,base.main_company,Always True,,,,,,,Net,,,,result = categories.GROSS - categories.DED - categories.CAT_CPF_EMPLOYEE - categories. CATCPFAGENCYSERVICESEE, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,500
__export__.hr_salary_rule_45,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC102,base.main_company,Always True,,,,,,,Over Time (1.5),,,,b = ((categories.BASIC - SC48) *12 / 2288 * 1.5) result = ((b).__trunc__() + (((b % 1) * 100 ).__trunc__()) * 0.01) * inputs.SC102I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,102
__export__.hr_salary_rule_46,,True,Python Code,True,hr_payroll.BASIC,,SC100,base.main_company,Always True,,,,,,,Part Timer Wage,,,,result = ((contract.wage * (inputs.SC100I.amount or 1)) - contract.wage), # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,100
__export__.hr_salary_rule_47,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC104,base.main_company,Always True,,,,,,,Commission,,,,result = inputs.SC104I.amount  + payslip.ppd_commission_amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,104
__export__.hr_salary_rule_48,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC105,base.main_company,Always True,,,,,,,Incentive,,,,result = inputs.SC105I.amount  + payslip.ppd_commission_amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,105
__export__.hr_salary_rule_49,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC122,base.main_company,Always True,,,,,,,Others,,,,result = inputs.SC122I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,122
__export__.hr_salary_rule_50,,True,Python Code,True,__export__.hr_salary_rule_category_19,,SC200,base.main_company,Always True,,,,,,,Undertime,,,,result = ((categories.BASIC - SC48) * 12 / 2288 * inputs.SC200I.amount), # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,200
__export__.hr_salary_rule_51,,True,Python Code,True,__export__.hr_salary_rule_category_8,,SC201,base.main_company,Always True,,,,,,,ADJ To Comm,,,,result = inputs.SC201I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,201
__export__.hr_salary_rule_52,,True,Python Code,True,__export__.hr_salary_rule_category_8,,SC202,base.main_company,Always True,,,,,,,Loan,,,,result = inputs.SC202I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,202
__export__.hr_salary_rule_53,,True,Python Code,True,__export__.hr_salary_rule_category_8,,SC203,base.main_company,Always True,,,,,,,Pay / Absent,,,,result = inputs.SC203I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,203
__export__.hr_salary_rule_54,,True,Python Code,True,__export__.hr_salary_rule_category_8,,SC204,base.main_company,Always True,,,,,,,NS Pay,,,,result = inputs.SC204I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,204
__export__.hr_salary_rule_55,,True,Python Code,True,__export__.hr_salary_rule_category_8,,SC299,base.main_company,Always True,,,,,,,Others,,,,result = inputs.SC299I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,299
__export__.hr_salary_rule_56,,True,Python Code,True,__export__.hr_salary_rule_category_19,,SC206,base.main_company,Always True,,#result = (categories.BASIC / (worked_days.TTLDAYINMTH.number_of_days - worked_days.TTLSUNINMONTH.number_of_days) * worked_days.UPL.number_of_days) + (categories.BASIC / (worked_days.TTLDAYINMTH.number_of_days - worked_days.TTLSUNINMONTH.number_of_days) * inputs.SC206I.amount),,,,,Unpaid Leave (Normal),,,,result = (categories.BASIC * 12 / 312) * inputs.SC206I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,206
__export__.hr_salary_rule_57,,True,Python Code,True,__export__.hr_salary_rule_category_18,,CPFEE_SPR3_SIN,base.main_company,Python Expression,__export__.hr_contribution_register_10,,,,,,CPF Employee (SPR3 / SINGAPOREAN),,,,if employee.age >= 66:     if categories.GROSS > 500.01 and categories.GROSS <= 750:         result =  __import__('math').floor((categories.GROSS - 500) * 0.12)     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result =  __import__('math').floor((categories.GROSS - 750) * 0.06 + 30)     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result =  __import__('math').floor((categories.GROSS - 750) * 0.06 + 30)     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  __import__('math').floor(5000 * 0.05)         else:             result =  __import__('math').floor(categories.GROSS * 0.05)     else:         result=0 elif employee.age >= 61 and employee.age <=65:     if categories.GROSS > 500.01 and categories.GROSS <= 750:         result =  __import__('math').floor((categories.GROSS - 500) * 0.18)     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result =  __import__('math').floor((categories.GROSS - 750) * 0.09 + 45)     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result =  __import__('math').floor((categories.GROSS - 750) * 0.09 + 45)     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  __import__('math').floor(5000 * 0.075)         else:             result =  __import__('math').floor(categories.GROSS * 0.075)     else:         result=0 elif employee.age >= 56 and employee.age <=60:     if categories.GROSS > 500.01 and categories.GROSS <= 750:         result =  __import__('math').floor((categories.GROSS - 500) * 0.312)     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result =  __import__('math').floor((categories.GROSS - 750) * 0.156 + 78)     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result =  __import__('math').floor((categories.GROSS - 750) * 0.156 + 78)     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  __import__('math').floor(5000 * 0.13)         else:             result =  __import__('math').floor(categories.GROSS * 0.13)     else:         result=0 elif employee.age >= 51 and employee.age <=55:     if categories.GROSS > 500.01 and categories.GROSS <= 750:         result =  __import__('math').floor((categories.GROSS - 500) * 0.444)     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result =  __import__('math').floor((categories.GROSS - 750) * 0.222 + 111)     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result =  __import__('math').floor((categories.GROSS - 750) * 0.222 + 111)     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  __import__('math').floor(5000 * 0.185)         else:             result =  __import__('math').floor(categories.GROSS * 0.185)     else:         result=0 elif employee.age >= 36 and employee.age <=50:     if categories.GROSS > 500.01 and categories.GROSS <= 750:         result =  __import__('math').floor((categories.GROSS - 500) * 0.48)     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result =  __import__('math').floor((categories.GROSS - 750) * 0.24 + 120)     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result =  __import__('math').floor((categories.GROSS - 750) * 0.24 + 120)     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  __import__('math').floor(5000 * 0.20)         else:             result =  __import__('math').floor(categories.GROSS * 0.20)     else:         result=0 elif employee.age <= 35:     if categories.GROSS > 500.01 and categories.GROSS <= 750:         result =  __import__('math').floor((categories.GROSS - 500) * 0.48)     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result =  __import__('math').floor((categories.GROSS - 750) * 0.24 + 120)     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result =  __import__('math').floor((categories.GROSS - 750) * 0.24 + 120)     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  __import__('math').floor(5000 * 0.20)         else:             result =  __import__('math').floor(categories.GROSS * 0.20)     else:         result=0,if categories.GROSS > 49:   result = True else:   result = False,1,contract.wage,301
__export__.hr_salary_rule_58,,True,Python Code,True,__export__.hr_salary_rule_category_16,,CPFER_SPR3_SIN,base.main_company,Python Expression,__export__.hr_contribution_register_10,,,,,,CPF Employer (SPR3 / SINGAPOREAN),,,,result = categories.CAT_CPF_TOTAL - categories.CAT_CPF_EMPLOYEE,if categories.GROSS > 49:   result = True else:   result = False,1,contract.wage,303
__export__.hr_salary_rule_59,,True,Python Code,True,__export__.hr_salary_rule_category_21,,CPFMBMF,base.main_company,Always True,__export__.hr_contribution_register_4,,,,,,CPF - MBMF,,,,if categories.GROSS >= 4001:     result = 16.00 elif categories.GROSS >= 201 and categories.GROSS <= 1000:     result = 2 elif categories.GROSS >= 1001 and categories.GROSS <= 2000:     result = 3.50 elif categories.GROSS >= 2001 and categories.GROSS <= 3000:     result = 5 elif categories.GROSS >= 3001 and categories.GROSS <= 4000:     result = 12.50 elif categories.GROSS >= 0 and categories.GROSS <= 200:     result = 0, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,325
__export__.hr_salary_rule_60,,True,Python Code,True,__export__.hr_salary_rule_category_21,,CPFSINDA,base.main_company,Always True,__export__.hr_contribution_register_5,,,,,,CPF - SINDA,,,,if categories.GROSS >= 2500:     result = 7 elif categories.GROSS >= 601 and categories.GROSS <= 1500:     result = 3 elif categories.GROSS >= 1501 and categories.GROSS <= 2500:     result = 5 elif categories.GROSS >= 0 and categories.GROSS <= 600:     result = 1, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,326
__export__.hr_salary_rule_61,,True,Python Code,True,__export__.hr_salary_rule_category_21,,CPFCDAC,base.main_company,Always True,__export__.hr_contribution_register_6,,,,,,CPF - CDAC,,,,if categories.GROSS >= 2000:     result = 1 elif categories.GROSS >= 0 and categories.GROSS <= 1999:     result = 0.5, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,327
__export__.hr_salary_rule_62,,True,Python Code,True,__export__.hr_salary_rule_category_21,,CPFECF,base.main_company,Always True,__export__.hr_contribution_register_7,,,,,,CPF - ECF,,,,if categories.GROSS >= 4000.01:     result = 10 elif categories.GROSS >= 2500.01 and categories.GROSS <= 4000:     result = 8 elif categories.GROSS >= 1500.01 and categories.GROSS <= 2500:     result = 6 elif categories.GROSS >= 1000.01 and categories.GROSS <= 1500:     result = 4 elif categories.GROSS >= 0 and categories.GROSS <= 1000:     result = 2, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,328
__export__.hr_salary_rule_63,,True,Python Code,True,__export__.hr_salary_rule_category_23,,CPFSDL,base.main_company,Always True,__export__.hr_contribution_register_8,,,,,,CPF - SDL,,,,if categories.GROSS >= 4500:     result = 11.25 elif categories.GROSS >= 800 and categories.GROSS <= 4499:     result = categories.GROSS * 0.0025 elif categories.GROSS >= 0 and categories.GROSS <= 799:     result = 2 , # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,350
__export__.hr_salary_rule_64,,True,Python Code,True,__export__.hr_salary_rule_category_23,,SC400,base.main_company,Always True,__export__.hr_contribution_register_9,,300,,,,FWL - S Pass,,,,result  = inputs.SC400I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,400
__export__.hr_salary_rule_68,,True,Python Code,True,__export__.hr_salary_rule_category_23,,SC401,base.main_company,Always True,__export__.hr_contribution_register_9,,400,,,,FWL - Work Permit,,,,result = inputs.SC401I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,401
__export__.hr_salary_rule_72,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC106,base.main_company,Always True,,,50,,,,Grooming Allowance,,,,result = inputs.SC106I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,106
__export__.hr_salary_rule_74,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC108,base.main_company,Always True,,,100,,,,Supervisory Allowance,,,,result = inputs.SC108I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,108
__export__.hr_salary_rule_76,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC121,base.main_company,Always True,__export__.hr_contribution_register_13,,,,,,Bonus,,,,if inputs.SC121I.amount:     result =  inputs.SC121I.amount else:     result = 0, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,121
__export__.hr_salary_rule_79,,True,Fixed Amount,True,__export__.hr_salary_rule_category_8,,SC298,base.main_company,Always True,,,500,,,,Ded - ($500),,,,result = inputs.SC299I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,298
__export__.hr_salary_rule_82,,True,Python Code,True,hr_payroll.BASIC,,SC48,base.main_company,Always True,,,,,,,Basic - Back Pay,,,,result = inputs.SC48I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,48
__export__.hr_salary_rule_88,,True,Python Code,True,__export__.hr_salary_rule_category_8,,SC250,base.main_company,Always True,,,220,,,,Agent Rebates,,,,result = inputs.SC250I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,250
__export__.hr_salary_rule_90,,True,Python Code,True,hr_payroll.BASIC,,SC49,base.main_company,Always True,,,-300,,,,Deduction - M,,,,result = - inputs.SC49I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,49
__export__.hr_salary_rule_92,,True,Python Code,True,__export__.hr_salary_rule_category_17,,CPFTOTAL_SPR3_SIN,base.main_company,Python Expression,,,,,,,CPF Total (SPR3 / SINGAPOREAN),,,,if employee.age >= 66:     if categories.GROSS > 50.01 and categories.GROSS <= 500:         result = round(0.0431 * (categories.GROSS - 50))     elif categories.GROSS > 500.01 and categories.GROSS <= 750:         result = round(0.0431 * (categories.GROSS - 50) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result = round( (30.225 + (0.0541 * (categories.GROSS - 750))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result = round( (54.60 + (0.143 * (categories.GROSS - 1200))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  round(5000 * 0.115)         else:             result =  round(categories.GROSS * 0.115)     else:         result=0 elif employee.age >= 61 and employee.age <=65:     if categories.GROSS > 50.01 and categories.GROSS <= 500:         result = round(0.0465 * (categories.GROSS - 50))     elif categories.GROSS > 500.01 and categories.GROSS <= 750:         result = round(0.0465 * (categories.GROSS - 50) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result = round( (32.55 + (0.0583 * (categories.GROSS - 750))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result = round( (58.80 + (0.154 * (categories.GROSS - 1200))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  round(5000 * 0.145)         else:             result =  round(categories.GROSS * 0.145)     else:         result=0 elif employee.age >= 56 and employee.age <=60:     if categories.GROSS > 50.01 and categories.GROSS <= 500:         result = round(0.0697 * (categories.GROSS - 50))     elif categories.GROSS > 500.01 and categories.GROSS <= 750:         result = round(0.0697 * (categories.GROSS - 50) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result = round( (48.825 + (0.1155 * (categories.GROSS - 750))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result = round( (100.80 + (0.189 * (categories.GROSS - 1200))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  round(5000 * 0.235)         else:             result =  round(categories.GROSS * 0.235)     else:         result=0 elif employee.age >= 51 and employee.age <=55:     if categories.GROSS > 50.01 and categories.GROSS <= 500:         result = round(0.093 * (categories.GROSS - 50))     elif categories.GROSS > 500.01 and categories.GROSS <= 750:         result = round(0.093 * (categories.GROSS - 50) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result = round( (65.10 + (0.1756 * (categories.GROSS - 750))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result = round( (144.12 + (0.2196 * (categories.GROSS - 1200))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  round(5000 * 0.325)         else:             result =  round(categories.GROSS * 0.325)     else:         result=0 elif employee.age >= 36 and employee.age <=50:     if categories.GROSS > 50.01 and categories.GROSS <= 500:         result = round(0.1063 * (categories.GROSS - 50))     elif categories.GROSS > 500.01 and categories.GROSS <= 750:         result = round(0.1063 * (categories.GROSS - 50) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result = round( (74.475 + (0.2171 * (categories.GROSS - 750))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result = round( (172.20 + (0.2226 * (categories.GROSS - 1200))) + (categories.CAT_CPF_EMPLOYEE))     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  round(5000 * 0.36)         else:             result =  round(categories.GROSS * 0.36)     else:         result=0 elif employee.age <= 35:     if categories.GROSS > 50.01 and categories.GROSS <= 500:         result = round(categories.GROSS * 0.16)     elif categories.GROSS > 500.01 and categories.GROSS <= 750:         result = round(categories.GROSS * 0.16) + categories.CAT_CPF_EMPLOYEE     elif categories.GROSS > 750.01 and categories.GROSS < 1200:         result = round(categories.GROSS * 0.16) + categories.CAT_CPF_EMPLOYEE     elif categories.GROSS > 1200.01 and categories.GROSS < 1500:         result = round(categories.GROSS * 0.16) + categories.CAT_CPF_EMPLOYEE     elif categories.GROSS > 1500:         if categories.GROSS > 5000:             result =  round(5000 * 0.36)         else:             result =  round(categories.GROSS * 0.36)     else:         result=0,if categories.GROSS > 49:   result = True else:   result = False,1,contract.wage,302
__export__.hr_salary_rule_93,,True,Python Code,True,__export__.hr_salary_rule_category_19,,SC207,base.main_company,Always True,,,,,,,Unpaid Leave (Bensius),,,,result = categories.BASIC / (worked_days.TTLDAYINMTH.number_of_days - 4) * inputs.SC207I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,207
__export__.hr_salary_rule_94,,True,Python Code,True,hr_payroll.BASIC,,SC50,base.main_company,Always True,,,,,,,Deductions - M,,,,result = -inputs.SC50I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,50
__export__.hr_salary_rule_96,,True,Python Code,True,__export__.hr_salary_rule_category_19,,SC208,base.main_company,Always True,,,,,,,Others,,,,result = inputs.SC208I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,208
__export__.hr_salary_rule_97,,True,Python Code,True,__export__.hr_salary_rule_category_7,,SC123,base.main_company,Always True,,,1,,,,Housing Allowance,,,,result = inputs.SC123I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,123
__export__.hr_salary_rule_98,,True,Python Code,True,hr_payroll.BASIC,,SC99,base.main_company,Always True,,,,,,,Basic - Prorate Deduction (Warehouse),,,,result = -(categories.BASIC * 12 / 286) *inputs.SC99I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,99
__export__.hr_salary_rule_99,,True,Python Code,True,hr_payroll.BASIC,,SC98,base.main_company,Always True,,,,,,,Basic - Prorate Deduction (Promoters),,,,result = -(categories.BASIC * 12 / 312) *inputs.SC98I.amount, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,98
__export__.hr_salary_rule_100,,True,Fixed Amount,True,__export__.hr_salary_rule_category_16,,CPFER_SPR1,base.main_company,Always True,,,,,,,CPF Employer (SPR1),,,, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days. # inputs: object containing the computed inputs.  # Note: returned value have to be set in the variable 'result'  result = contract.wage * 0.10, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,306
__export__.hr_salary_rule_101,,True,Fixed Amount,True,__export__.hr_salary_rule_category_16,,CPFERSPR2,base.main_company,Always True,,,,,,,CPF Employer (SPR2),,,, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days. # inputs: object containing the computed inputs.  # Note: returned value have to be set in the variable 'result'  result = contract.wage * 0.10, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,309
hr_payroll.hr_rule_net,,True,Python Code,True,hr_payroll.NET,,NET,base.main_company,Always True,,,,,,,Net,,,,result = categories.BASIC + categories.ALW + categories.DED, # Available variables: #---------------------- # payslip: object containing the payslips # employee: hr.employee object # contract: hr.contract object # rules: object containing the rules code (previously computed) # categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category). # worked_days: object containing the computed worked days # inputs: object containing the computed inputs  # Note: returned value have to be set in the variable 'result'  result = rules.NET > categories.NET * 0.10,1,contract.wage,200
