# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#    Copyright (C) 2011-2012 Serpent Consulting Services (<http://www.serpentcs.com>)
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import fields,osv

class school_teacher_assignment(osv.osv):
	_name = 'school.teacher.assignment'
	_description = 'Teacher Assignment Information'
	_columns = {
		'name': fields.char("Assignment Name", size = 30, required= True),
		'subject_id': fields.many2one("subject.subject","Subject",required=True),
		'standard_id': fields.many2one("standard.standard","Standard"),
		'division_id': fields.many2one("standard.division","Division"),
		'teacher_id': fields.many2one("hr.employee","Teacher",required=True),
		'medium_id': fields.many2one("standard.medium","Medium", required=True),
		'assign_date': fields.date("Assign Date", required=True),
		'due_date': fields.date("Due Date", required=True),
		'attached_homework': fields.binary("Attached Home work"),
		'state': fields.selection([('draft','Draft'), ('active','Active')],"Status",readonly=True),
	}
	_defaults = {
		'state': lambda *a: 'draft'	

	}
	def active_assigment(self, cr, uid, ids, context=None):
		if context is None:
			context = {}
		assigment_obj = self.pool.get("school.student.assignment")
		std_obj = self.pool.get('student.student')
		for ass_data in self.browse(cr, uid, ids, context=context):
			std_ids = std_obj.search(cr, uid, [('class_id', '=', ass_data.standard_id.id), ('division_id','=',ass_data.division_id.id), ('medium_id','=',ass_data.medium_id.id)], context=context)
			for std in std_obj.browse(cr, uid, std_ids, context=context):
				assignment_id = assigment_obj.create(cr, uid,{
									'name': ass_data.name,
									'subject_id': ass_data.subject_id.id,
									'standard_id': ass_data.standard_id.id,
									'division_id': ass_data.division_id.id,
									'assign_date': ass_data.assign_date,
									'due_date': ass_data.due_date,
									'state': 'active',
									'attached_homework': ass_data.attached_homework,
									'teacher_id': ass_data.teacher_id.id,
									'student_id' : std.id
								})
				if ass_data.attached_homework:
					data_attach = {
							'name': 'test',
							'datas':str(ass_data.attached_homework),
							'description': 'Assignment attachment',
							'res_model': 'school.student.assignment',
							'res_id': assignment_id,
						}
					self.pool.get('ir.attachment').create(cr, uid, data_attach, context=context)
			self.write(cr, uid, ids, {'state': 'active'}, context=context)
			return True
	
school_teacher_assignment()


class school_student_assignment(osv.osv):

	_name = 'school.student.assignment'
	_description = 'Student Assignment Information'
	_columns = {
				'name': fields.char("Assignment Name", size = 30 , readonly = True),
				'subject_id': fields.many2one("subject.subject","Subject",readonly = True),
				'standard_id': fields.many2one("standard.standard","Standard",readonly = True),
				'division_id': fields.many2one("standard.division","Division"),
				'teacher_id': fields.many2one("hr.employee","Teacher",readonly = True),
				'assign_date': fields.date("Assign Date" ,readonly = True),
				'due_date': fields.date("Due Date",readonly = True),
				'state': fields.selection([('draft','Draft'),('active','Active'),('done','done')],"Status",readonly = True),
				'student_id' : fields.many2one('student.student', 'Student', readonly = True)
	}
school_student_assignment()

# vim:expandtab:smartindent:tabstop=4:softtabstop=4:shiftwidth=4:
