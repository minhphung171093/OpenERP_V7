# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#    Copyright (C) 2011-2012 Serpent Consulting Services (<http://www.serpentcs.com>)
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

from osv import fields, osv


class time_table(osv.osv):
    _description ='Time Table'
    _name = 'time.table'
    
     
    def onchange_class(self, cr, uid, ids, class_id):
        class_res={}
        class_object=self.pool.get('school.standard')
        class_record=class_object.browse(cr, uid, class_id)
        class_res.update({'value':{'division_id':class_record.division_id.id, 'medium_id':class_record.medium_id.id}})
        if class_id:
            class_record=class_object.browse(cr, uid, class_id)
            class_res.update({'value':{'division_id':class_record.division_id.id, 'medium_id':class_record.medium_id.id}})
        return class_res
    
    _columns = {
    	'name': fields.char('Description', size=64), 
    	'class_id': fields.many2one('school.standard', 'Academic Class', required=True), 
		'division_id': fields.many2one('standard.division', 'Division', required=True), 
		'medium_id': fields.many2one('standard.medium', 'Medium', required=True), 
		'year_id': fields.many2one('academic.year', 'Year', required=True), 
       	'timetable_ids':fields.one2many('time.table.line', 'table_id', 'TimeTable')
    }
    
    _defaults = {
        'class_id':1
                 }
    
    
    def _check_lecture(self, cr, uid , ids, context=None):
        records=[]
        line_obj = self.pool.get('time.table.line')
        line_ids = line_obj.search(cr, uid, [('table_id', '=', ids[0])])
        rec_ids = line_obj.browse(cr, uid, line_ids)
        for rec in rec_ids:
            count=0
            for i in rec_ids:
                if (rec.week_day == i.week_day) and (rec.start_time == i.start_time) and  (rec.end_time == i.end_time):
                    count=count+1
                    if count >1:
                        records.append(i.id)
                        return False      
        return True
    
    _constraints=[
                  (_check_lecture,'You can Not set lecture at same time at same day..!!!',['name'])
                  ]
    
time_table()

class time_table_line(osv.osv):
    _description ='Time Table Line'
    _name = 'time.table.line'
    
    def onchange_recess(self, cr, uid, ids, recess):
        recess = {}
        sub_obj = self.pool.get('subject.subject')
        emp_obj = self.pool.get('resource.resource')
        hr_obj = self.pool.get('hr.employee')        
        sub_id = sub_obj.search(cr, uid, [('name', 'like', 'Recess')])
        emp_id = emp_obj.search(cr, uid, [('name', 'like', 'None')])
        emp=emp_id[0]
        hr_id = hr_obj.search(cr , uid, [('resource_id' , '=' , emp)])
        recess.update({'value':{'subject_id':sub_id[0], 'teacher_id':hr_id[0]}})
        return recess
         
        
    _rec_name ="table_id"
    _columns = {

		'teacher_id': fields.many2one('hr.employee', 'Supervisor Name',), 
		'subject_id': fields.many2one('subject.subject', 'Subject Name', required=True), 
		'table_id': fields.many2one('time.table', 'TimeTable'), 
		'start_time' : fields.float('Start Time', required=True), 
		'end_time' : fields.float('End Time', required=True), 
        'recess': fields.boolean('Recess Time'), 
		'week_day' : fields.selection([('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], "Week day",), 
   	    
    }  
    
time_table_line()

class subject_subject(osv.osv):
    _name = 'subject.subject'
    _inherit ="subject.subject"
    _columns = {

    }
    def search(self, cr, uid, args, offset=0, limit=None, order=None, context=None, count=False):
        if context is None:
            context = {}
        if context.get('teacher_id'):
            teacher_obj = self.pool.get('hr.employee')
            teacher_data = teacher_obj.browse(cr, uid, context['teacher_id'], context=context)
            args.append(('teacher_ids', 'in', [teacher_data.id]))
        return super(subject_subject, self).search(cr, uid, args, offset, limit, order, context, count)

subject_subject()

